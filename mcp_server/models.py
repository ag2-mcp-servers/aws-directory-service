# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T10:40:24+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, ConfigDict, Field, RootModel, SecretStr, conint, constr


class AccessDeniedException(RootModel[Any]):
    root: Any


class AccessUrl(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class AddIpRoutesResult(BaseModel):
    pass


class AddRegionResult(BaseModel):
    pass


class AddTagsToResourceResult(BaseModel):
    pass


class AddedDateTime(RootModel[datetime]):
    root: datetime


class AliasName(
    RootModel[
        constr(
            pattern=r'^(?!D-|d-)([\da-zA-Z]+)([-]*[\da-zA-Z])*',
            min_length=1,
            max_length=62,
        )
    ]
):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    root: constr(
        pattern=r'^(?!D-|d-)([\da-zA-Z]+)([-]*[\da-zA-Z])*', min_length=1, max_length=62
    )


class AttributeName(RootModel[constr(min_length=1)]):
    root: constr(min_length=1)


class AttributeValue(RootModel[str]):
    root: str


class AuthenticationFailedException(RootModel[Any]):
    root: Any


class AvailabilityZone(RootModel[str]):
    root: str


class AvailabilityZones(RootModel[List[AvailabilityZone]]):
    root: List[AvailabilityZone]


class CancelSchemaExtensionResult(BaseModel):
    pass


class CertificateAlreadyExistsException(RootModel[Any]):
    root: Any


class CertificateCN(RootModel[str]):
    root: str


class CertificateData(RootModel[constr(min_length=1, max_length=8192)]):
    root: constr(min_length=1, max_length=8192)


class CertificateDoesNotExistException(RootModel[Any]):
    root: Any


class CertificateExpiryDateTime(RootModel[datetime]):
    root: datetime


class CertificateId(RootModel[constr(pattern=r'^c-[0-9a-f]{10}$')]):
    root: constr(pattern=r'^c-[0-9a-f]{10}$')


class CertificateInUseException(RootModel[Any]):
    root: Any


class CertificateLimitExceededException(RootModel[Any]):
    root: Any


class CertificateRegisteredDateTime(RootModel[datetime]):
    root: datetime


class CertificateState(Enum):
    Registering = 'Registering'
    Registered = 'Registered'
    RegisterFailed = 'RegisterFailed'
    Deregistering = 'Deregistering'
    Deregistered = 'Deregistered'
    DeregisterFailed = 'DeregisterFailed'


class CertificateStateReason(RootModel[str]):
    root: str


class CertificateType(Enum):
    ClientCertAuth = 'ClientCertAuth'
    ClientLDAPS = 'ClientLDAPS'


class CidrIp(
    RootModel[
        constr(
            pattern=r'^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([1-9]|[1-2][0-9]|3[0-2]))$'
        )
    ]
):
    root: constr(
        pattern=r'^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([1-9]|[1-2][0-9]|3[0-2]))$'
    )


class CidrIps(RootModel[List[CidrIp]]):
    root: List[CidrIp]


class ClientAuthenticationStatus(Enum):
    Enabled = 'Enabled'
    Disabled = 'Disabled'


class ClientAuthenticationType(Enum):
    SmartCard = 'SmartCard'
    SmartCardOrPassword = 'SmartCardOrPassword'


class ClientException(RootModel[Any]):
    root: Any


class CloudOnlyDirectoriesLimitReached(RootModel[bool]):
    root: bool


class ComputerName(RootModel[constr(min_length=1, max_length=15)]):
    root: constr(min_length=1, max_length=15)


class ComputerPassword(RootModel[SecretStr]):
    root: SecretStr


class ConnectPassword(RootModel[SecretStr]):
    root: SecretStr


class ConnectedDirectoriesLimitReached(RootModel[bool]):
    root: bool


class CreateConditionalForwarderResult(BaseModel):
    pass


class CreateLogSubscriptionResult(BaseModel):
    pass


class CreateSnapshotBeforeSchemaExtension(RootModel[bool]):
    root: bool


class CreateSnapshotBeforeUpdate(RootModel[bool]):
    root: bool


class CreatedDateTime(RootModel[datetime]):
    root: datetime


class CustomerId(RootModel[constr(pattern=r'^(\d{12})$')]):
    root: constr(pattern=r'^(\d{12})$')


class CustomerUserName(
    RootModel[
        constr(
            pattern=r'^(?!.*\\|.*"|.*\/|.*\[|.*\]|.*:|.*;|.*\||.*=|.*,|.*\+|.*\*|.*\?|.*<|.*>|.*@).*$',
            min_length=1,
            max_length=64,
        )
    ]
):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    root: constr(
        pattern=r'^(?!.*\\|.*"|.*\/|.*\[|.*\]|.*:|.*;|.*\||.*=|.*,|.*\+|.*\*|.*\?|.*<|.*>|.*@).*$',
        min_length=1,
        max_length=64,
    )


class DeleteAssociatedConditionalForwarder(RootModel[bool]):
    root: bool


class DeleteConditionalForwarderResult(BaseModel):
    pass


class DeleteLogSubscriptionResult(BaseModel):
    pass


class DeregisterCertificateResult(BaseModel):
    pass


class DeregisterEventTopicResult(BaseModel):
    pass


class Description(
    RootModel[
        constr(
            pattern=r'^([a-zA-Z0-9_])[\\a-zA-Z0-9_@#%*+=:?./!\s-]*$',
            min_length=0,
            max_length=128,
        )
    ]
):
    root: constr(
        pattern=r'^([a-zA-Z0-9_])[\\a-zA-Z0-9_@#%*+=:?./!\s-]*$',
        min_length=0,
        max_length=128,
    )


class DesiredNumberOfDomainControllers(RootModel[conint(ge=2)]):
    root: conint(ge=2)


class DirectoryAlreadyInRegionException(RootModel[Any]):
    root: Any


class DirectoryAlreadySharedException(RootModel[Any]):
    root: Any


class DirectoryConfigurationSettingAllowedValues(RootModel[str]):
    root: str


class DirectoryConfigurationSettingLastRequestedDateTime(RootModel[datetime]):
    root: datetime


class DirectoryConfigurationSettingLastUpdatedDateTime(RootModel[datetime]):
    root: datetime


class DirectoryConfigurationSettingName(
    RootModel[constr(pattern=r'^[a-zA-Z0-9-/. _]*$', min_length=1, max_length=255)]
):
    root: constr(pattern=r'^[a-zA-Z0-9-/. _]*$', min_length=1, max_length=255)


class DirectoryConfigurationSettingRequestStatusMessage(RootModel[str]):
    root: str


class DirectoryConfigurationSettingType(RootModel[str]):
    root: str


class DirectoryConfigurationSettingValue(
    RootModel[constr(pattern=r'^[a-zA-Z0-9]*$', min_length=1, max_length=255)]
):
    root: constr(pattern=r'^[a-zA-Z0-9]*$', min_length=1, max_length=255)


class DirectoryConfigurationStatus(Enum):
    Requested = 'Requested'
    Updating = 'Updating'
    Updated = 'Updated'
    Failed = 'Failed'
    Default = 'Default'


class DirectoryDoesNotExistException(RootModel[Any]):
    root: Any


class DirectoryEdition(Enum):
    Enterprise = 'Enterprise'
    Standard = 'Standard'


class DirectoryId(RootModel[constr(pattern=r'^d-[0-9a-f]{10}$')]):
    root: constr(pattern=r'^d-[0-9a-f]{10}$')


class DirectoryIds(RootModel[List[DirectoryId]]):
    root: List[DirectoryId] = Field(..., description='A list of directory identifiers.')


class DirectoryInDesiredStateException(RootModel[Any]):
    root: Any


class DirectoryLimitExceededException(RootModel[Any]):
    root: Any


class DirectoryName(
    RootModel[constr(pattern=r'^([a-zA-Z0-9]+[\\.-])+([a-zA-Z0-9])+$')]
):
    root: constr(pattern=r'^([a-zA-Z0-9]+[\\.-])+([a-zA-Z0-9])+$')


class DirectoryNotSharedException(RootModel[Any]):
    root: Any


class DirectoryShortName(RootModel[constr(pattern=r'^[^\\/:*?"<>|.]+[^\\/:*?"<>|]*$')]):
    root: constr(pattern=r'^[^\\/:*?"<>|.]+[^\\/:*?"<>|]*$')


class DirectorySize(Enum):
    Small = 'Small'
    Large = 'Large'


class DirectoryStage(Enum):
    Requested = 'Requested'
    Creating = 'Creating'
    Created = 'Created'
    Active = 'Active'
    Inoperable = 'Inoperable'
    Impaired = 'Impaired'
    Restoring = 'Restoring'
    RestoreFailed = 'RestoreFailed'
    Deleting = 'Deleting'
    Deleted = 'Deleted'
    Failed = 'Failed'


class DirectoryType(Enum):
    SimpleAD = 'SimpleAD'
    ADConnector = 'ADConnector'
    MicrosoftAD = 'MicrosoftAD'
    SharedMicrosoftAD = 'SharedMicrosoftAD'


class DirectoryUnavailableException(RootModel[Any]):
    root: Any


class DisableClientAuthenticationRequest(BaseModel):
    DirectoryId_1: DirectoryId = Field(..., alias='DirectoryId')
    Type: ClientAuthenticationType


class DisableClientAuthenticationResult(BaseModel):
    pass


class DisableLDAPSResult(BaseModel):
    pass


class DisableRadiusRequest(BaseModel):
    DirectoryId_1: DirectoryId = Field(..., alias='DirectoryId')


class DisableRadiusResult(BaseModel):
    pass


class DisableSsoResult(BaseModel):
    pass


class DomainControllerId(RootModel[constr(pattern=r'^dc-[0-9a-f]{10}$')]):
    root: constr(pattern=r'^dc-[0-9a-f]{10}$')


class DomainControllerIds(RootModel[List[DomainControllerId]]):
    root: List[DomainControllerId]


class DomainControllerLimitExceededException(RootModel[Any]):
    root: Any


class DomainControllerStatus(Enum):
    Creating = 'Creating'
    Active = 'Active'
    Impaired = 'Impaired'
    Restoring = 'Restoring'
    Deleting = 'Deleting'
    Deleted = 'Deleted'
    Failed = 'Failed'


class DomainControllerStatusReason(RootModel[str]):
    root: str


class EnableClientAuthenticationRequest(BaseModel):
    DirectoryId_1: DirectoryId = Field(..., alias='DirectoryId')
    Type: ClientAuthenticationType


class EnableClientAuthenticationResult(BaseModel):
    pass


class EnableLDAPSResult(BaseModel):
    pass


class EnableRadiusResult(BaseModel):
    pass


class EnableSsoResult(BaseModel):
    pass


class EndDateTime(RootModel[datetime]):
    root: datetime


class EntityAlreadyExistsException(RootModel[Any]):
    root: Any


class EntityDoesNotExistException(RootModel[Any]):
    root: Any


class GetDirectoryLimitsRequest(BaseModel):
    pass


class GetSnapshotLimitsRequest(BaseModel):
    DirectoryId_1: DirectoryId = Field(..., alias='DirectoryId')


class IncompatibleSettingsException(RootModel[Any]):
    root: Any


class InitiatedBy(RootModel[str]):
    root: str


class InsufficientPermissionsException(RootModel[Any]):
    root: Any


class InvalidCertificateException(RootModel[Any]):
    root: Any


class InvalidClientAuthStatusException(RootModel[Any]):
    root: Any


class InvalidLDAPSStatusException(RootModel[Any]):
    root: Any


class InvalidNextTokenException(RootModel[Any]):
    root: Any


class InvalidParameterException(RootModel[Any]):
    root: Any


class InvalidPasswordException(RootModel[Any]):
    root: Any


class InvalidTargetException(RootModel[Any]):
    root: Any


class IpAddr(
    RootModel[
        constr(
            pattern=r'^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'
        )
    ]
):
    root: constr(
        pattern=r'^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'
    )


class IpAddrs(RootModel[List[IpAddr]]):
    root: List[IpAddr]


class IpRoute(BaseModel):
    CidrIp_1: Optional[CidrIp] = Field(None, alias='CidrIp')
    Description_1: Optional[Description] = Field(None, alias='Description')


class IpRouteLimitExceededException(RootModel[Any]):
    root: Any


class IpRouteStatusMsg(Enum):
    Adding = 'Adding'
    Added = 'Added'
    Removing = 'Removing'
    Removed = 'Removed'
    AddFailed = 'AddFailed'
    RemoveFailed = 'RemoveFailed'


class IpRouteStatusReason(RootModel[str]):
    root: str


class IpRoutes(RootModel[List[IpRoute]]):
    root: List[IpRoute]


class LDAPSStatus(Enum):
    Enabling = 'Enabling'
    Enabled = 'Enabled'
    EnableFailed = 'EnableFailed'
    Disabled = 'Disabled'


class LDAPSStatusReason(RootModel[str]):
    root: str


class LDAPSType(Enum):
    Client = 'Client'


class LastUpdatedDateTime(RootModel[datetime]):
    root: datetime


class LaunchTime(RootModel[datetime]):
    root: datetime


class LdifContent(RootModel[constr(min_length=1, max_length=500000)]):
    root: constr(min_length=1, max_length=500000)


class Limit(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class LogGroupName(
    RootModel[constr(pattern=r'[-._/#A-Za-z0-9]+', min_length=1, max_length=512)]
):
    root: constr(pattern=r'[-._/#A-Za-z0-9]+', min_length=1, max_length=512)


class ManualSnapshotsLimitReached(RootModel[bool]):
    root: bool


class NextToken(RootModel[str]):
    root: str


class NoAvailableCertificateException(RootModel[Any]):
    root: Any


class Notes(RootModel[SecretStr]):
    root: SecretStr


class OCSPUrl(
    RootModel[
        constr(
            pattern=r'^(https?|ftp|file|ldaps?)://[-a-zA-Z0-9+&@#/%?=~_|!:,.;()]*[-a-zA-Z0-9+&@#/%=~_|()]',
            min_length=1,
            max_length=1024,
        )
    ]
):
    root: constr(
        pattern=r'^(https?|ftp|file|ldaps?)://[-a-zA-Z0-9+&@#/%?=~_|!:,.;()]*[-a-zA-Z0-9+&@#/%=~_|()]',
        min_length=1,
        max_length=1024,
    )


class OSVersion(Enum):
    SERVER_2012 = 'SERVER_2012'
    SERVER_2019 = 'SERVER_2019'


class OrganizationalUnitDN(RootModel[constr(min_length=1, max_length=2000)]):
    root: constr(min_length=1, max_length=2000)


class OrganizationsException(RootModel[Any]):
    root: Any


class PageLimit(RootModel[conint(ge=1, le=50)]):
    root: conint(ge=1, le=50)


class Password(RootModel[SecretStr]):
    root: SecretStr


class PortNumber(RootModel[conint(ge=1025, le=65535)]):
    root: conint(ge=1025, le=65535)


class RadiusAuthenticationProtocol(Enum):
    PAP = 'PAP'
    CHAP = 'CHAP'
    MS_CHAPv1 = 'MS-CHAPv1'
    MS_CHAPv2 = 'MS-CHAPv2'


class RadiusDisplayLabel(RootModel[constr(min_length=1, max_length=64)]):
    root: constr(min_length=1, max_length=64)


class RadiusRetries(RootModel[conint(ge=0, le=10)]):
    root: conint(ge=0, le=10)


class RadiusSharedSecret(RootModel[SecretStr]):
    root: SecretStr


class RadiusStatus(Enum):
    Creating = 'Creating'
    Completed = 'Completed'
    Failed = 'Failed'


class RadiusTimeout(RootModel[conint(ge=1, le=20)]):
    root: conint(ge=1, le=20)


class RegionLimitExceededException(RootModel[Any]):
    root: Any


class RegionName(RootModel[constr(min_length=8, max_length=32)]):
    root: constr(min_length=8, max_length=32)


class RegionType(Enum):
    Primary = 'Primary'
    Additional = 'Additional'


class RegisterCertificateResult(BaseModel):
    CertificateId_1: Optional[CertificateId] = Field(None, alias='CertificateId')


class RegisterEventTopicResult(BaseModel):
    pass


class RejectSharedDirectoryRequest(BaseModel):
    SharedDirectoryId: DirectoryId


class RejectSharedDirectoryResult(BaseModel):
    SharedDirectoryId: Optional[DirectoryId] = None


class RemoteDomainName(
    RootModel[constr(pattern=r'^([a-zA-Z0-9]+[\\.-])+([a-zA-Z0-9])+[.]?$')]
):
    root: constr(pattern=r'^([a-zA-Z0-9]+[\\.-])+([a-zA-Z0-9])+[.]?$')


class RemoteDomainNames(RootModel[List[RemoteDomainName]]):
    root: List[RemoteDomainName]


class RemoveIpRoutesRequest(BaseModel):
    CidrIps_1: CidrIps = Field(..., alias='CidrIps')
    DirectoryId_1: DirectoryId = Field(..., alias='DirectoryId')


class RemoveIpRoutesResult(BaseModel):
    pass


class RemoveRegionRequest(BaseModel):
    DirectoryId_1: DirectoryId = Field(..., alias='DirectoryId')


class RemoveRegionResult(BaseModel):
    pass


class RemoveTagsFromResourceResult(BaseModel):
    pass


class ReplicationScope(Enum):
    Domain = 'Domain'


class RequestId(
    RootModel[
        constr(
            pattern=r'^([A-Fa-f0-9]{8}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{12})$'
        )
    ]
):
    root: constr(
        pattern=r'^([A-Fa-f0-9]{8}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{12})$'
    ) = Field(..., description='The Amazon Web Services request identifier.')


class ResetUserPasswordResult(BaseModel):
    pass


class ResourceId(RootModel[constr(pattern=r'^[d]-[0-9a-f]{10}$')]):
    root: constr(pattern=r'^[d]-[0-9a-f]{10}$')


class RestoreFromSnapshotResult(BaseModel):
    pass


class SID(RootModel[constr(pattern=r'[&\w+-.@]+', min_length=1, max_length=256)]):
    root: constr(pattern=r'[&\w+-.@]+', min_length=1, max_length=256)


class SchemaExtensionId(RootModel[constr(pattern=r'^e-[0-9a-f]{10}$')]):
    root: constr(pattern=r'^e-[0-9a-f]{10}$')


class SchemaExtensionStatus(Enum):
    Initializing = 'Initializing'
    CreatingSnapshot = 'CreatingSnapshot'
    UpdatingSchema = 'UpdatingSchema'
    Replicating = 'Replicating'
    CancelInProgress = 'CancelInProgress'
    RollbackInProgress = 'RollbackInProgress'
    Cancelled = 'Cancelled'
    Failed = 'Failed'
    Completed = 'Completed'


class SchemaExtensionStatusReason(RootModel[str]):
    root: str


class SecurityGroupId(RootModel[constr(pattern=r'^(sg-[0-9a-f]{8}|sg-[0-9a-f]{17})$')]):
    root: constr(pattern=r'^(sg-[0-9a-f]{8}|sg-[0-9a-f]{17})$')


class SelectiveAuth(Enum):
    Enabled = 'Enabled'
    Disabled = 'Disabled'


class Server(RootModel[constr(min_length=1, max_length=256)]):
    root: constr(min_length=1, max_length=256)


class Servers(RootModel[List[Server]]):
    root: List[Server]


class ServiceException(RootModel[Any]):
    root: Any


class Setting(BaseModel):
    Name: DirectoryConfigurationSettingName
    Value: DirectoryConfigurationSettingValue


class Settings(RootModel[List[Setting]]):
    root: List[Setting]


class ShareDirectoryResult(BaseModel):
    SharedDirectoryId: Optional[DirectoryId] = None


class ShareLimitExceededException(RootModel[Any]):
    root: Any


class ShareMethod(Enum):
    ORGANIZATIONS = 'ORGANIZATIONS'
    HANDSHAKE = 'HANDSHAKE'


class ShareStatus(Enum):
    Shared = 'Shared'
    PendingAcceptance = 'PendingAcceptance'
    Rejected = 'Rejected'
    Rejecting = 'Rejecting'
    RejectFailed = 'RejectFailed'
    Sharing = 'Sharing'
    ShareFailed = 'ShareFailed'
    Deleted = 'Deleted'
    Deleting = 'Deleting'


class SharedDirectory(BaseModel):
    CreatedDateTime_1: Optional[CreatedDateTime] = Field(None, alias='CreatedDateTime')
    LastUpdatedDateTime_1: Optional[LastUpdatedDateTime] = Field(
        None, alias='LastUpdatedDateTime'
    )
    OwnerAccountId: Optional[CustomerId] = None
    OwnerDirectoryId: Optional[DirectoryId] = None
    ShareMethod_1: Optional[ShareMethod] = Field(None, alias='ShareMethod')
    ShareNotes: Optional[Notes] = None
    ShareStatus_1: Optional[ShareStatus] = Field(None, alias='ShareStatus')
    SharedAccountId: Optional[CustomerId] = None
    SharedDirectoryId: Optional[DirectoryId] = None


class SnapshotId(RootModel[constr(pattern=r'^s-[0-9a-f]{10}$')]):
    root: constr(pattern=r'^s-[0-9a-f]{10}$')


class SnapshotIds(RootModel[List[SnapshotId]]):
    root: List[SnapshotId] = Field(
        ..., description='A list of directory snapshot identifiers.'
    )


class SnapshotLimitExceededException(RootModel[Any]):
    root: Any


class SnapshotLimits(BaseModel):
    ManualSnapshotsCurrentCount: Optional[Limit] = None
    ManualSnapshotsLimit: Optional[Limit] = None
    ManualSnapshotsLimitReached_1: Optional[ManualSnapshotsLimitReached] = Field(
        None, alias='ManualSnapshotsLimitReached'
    )


class SnapshotName(
    RootModel[
        constr(
            pattern=r'^([a-zA-Z0-9_])[\\a-zA-Z0-9_@#%*+=:?./!\s-]*$',
            min_length=0,
            max_length=128,
        )
    ]
):
    root: constr(
        pattern=r'^([a-zA-Z0-9_])[\\a-zA-Z0-9_@#%*+=:?./!\s-]*$',
        min_length=0,
        max_length=128,
    )


class SnapshotStatus(Enum):
    Creating = 'Creating'
    Completed = 'Completed'
    Failed = 'Failed'


class SnapshotType(Enum):
    Auto = 'Auto'
    Manual = 'Manual'


class SsoEnabled(RootModel[bool]):
    root: bool


class StageReason(RootModel[str]):
    root: str


class StartDateTime(RootModel[datetime]):
    root: datetime


class StartSchemaExtensionRequest(BaseModel):
    CreateSnapshotBeforeSchemaExtension_1: CreateSnapshotBeforeSchemaExtension = Field(
        ..., alias='CreateSnapshotBeforeSchemaExtension'
    )
    Description_1: Description = Field(..., alias='Description')
    DirectoryId_1: DirectoryId = Field(..., alias='DirectoryId')
    LdifContent_1: LdifContent = Field(..., alias='LdifContent')


class StartSchemaExtensionResult(BaseModel):
    SchemaExtensionId_1: Optional[SchemaExtensionId] = Field(
        None, alias='SchemaExtensionId'
    )


class StartTime(RootModel[datetime]):
    root: datetime


class StateLastUpdatedDateTime(RootModel[datetime]):
    root: datetime


class SubnetId(
    RootModel[constr(pattern=r'^(subnet-[0-9a-f]{8}|subnet-[0-9a-f]{17})$')]
):
    root: constr(pattern=r'^(subnet-[0-9a-f]{8}|subnet-[0-9a-f]{17})$')


class SubnetIds(RootModel[List[SubnetId]]):
    root: List[SubnetId]


class SubscriptionCreatedDateTime(RootModel[datetime]):
    root: datetime


class TagKey(
    RootModel[
        constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=128)
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=128
    )


class TagKeys(RootModel[List[TagKey]]):
    root: List[TagKey]


class TagLimitExceededException(RootModel[Any]):
    root: Any


class TagValue(
    RootModel[
        constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=0, max_length=256)
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=0, max_length=256
    )


class TargetId(RootModel[constr(min_length=1, max_length=64)]):
    root: constr(min_length=1, max_length=64)


class TargetType(Enum):
    ACCOUNT = 'ACCOUNT'


class TopicArn(RootModel[str]):
    root: str


class TopicName(
    RootModel[constr(pattern=r'[a-zA-Z0-9_-]+', min_length=1, max_length=256)]
):
    root: constr(pattern=r'[a-zA-Z0-9_-]+', min_length=1, max_length=256)


class TopicNames(RootModel[List[TopicName]]):
    root: List[TopicName]


class TopicStatus(Enum):
    Registered = 'Registered'
    Topic_not_found = 'Topic not found'
    Failed = 'Failed'
    Deleted = 'Deleted'


class TrustDirection(Enum):
    One_Way__Outgoing = 'One-Way: Outgoing'
    One_Way__Incoming = 'One-Way: Incoming'
    Two_Way = 'Two-Way'


class TrustId(RootModel[constr(pattern=r'^t-[0-9a-f]{10}$')]):
    root: constr(pattern=r'^t-[0-9a-f]{10}$')


class TrustIds(RootModel[List[TrustId]]):
    root: List[TrustId]


class TrustPassword(RootModel[SecretStr]):
    root: SecretStr


class TrustState(Enum):
    Creating = 'Creating'
    Created = 'Created'
    Verifying = 'Verifying'
    VerifyFailed = 'VerifyFailed'
    Verified = 'Verified'
    Updating = 'Updating'
    UpdateFailed = 'UpdateFailed'
    Updated = 'Updated'
    Deleting = 'Deleting'
    Deleted = 'Deleted'
    Failed = 'Failed'


class TrustStateReason(RootModel[str]):
    root: str


class TrustType(Enum):
    Forest = 'Forest'
    External = 'External'


class UnshareDirectoryResult(BaseModel):
    SharedDirectoryId: Optional[DirectoryId] = None


class UnshareTarget(BaseModel):
    Id: TargetId
    Type: TargetType


class UnsupportedOperationException(RootModel[Any]):
    root: Any


class UnsupportedSettingsException(RootModel[Any]):
    root: Any


class UpdateConditionalForwarderResult(BaseModel):
    pass


class UpdateDirectorySetupResult(BaseModel):
    pass


class UpdateNumberOfDomainControllersRequest(BaseModel):
    DesiredNumber: DesiredNumberOfDomainControllers
    DirectoryId_1: DirectoryId = Field(..., alias='DirectoryId')


class UpdateNumberOfDomainControllersResult(BaseModel):
    pass


class UpdateRadiusResult(BaseModel):
    pass


class UpdateSecurityGroupForDirectoryControllers(RootModel[bool]):
    root: bool


class UpdateSettingsRequest(BaseModel):
    DirectoryId_1: DirectoryId = Field(..., alias='DirectoryId')
    Settings_1: Settings = Field(..., alias='Settings')


class UpdateSettingsResult(BaseModel):
    DirectoryId_1: Optional[DirectoryId] = Field(None, alias='DirectoryId')


class UpdateStatus(Enum):
    Updated = 'Updated'
    Updating = 'Updating'
    UpdateFailed = 'UpdateFailed'


class UpdateStatusReason(RootModel[str]):
    root: str


class UpdateTrustRequest(BaseModel):
    SelectiveAuth_1: Optional[SelectiveAuth] = Field(None, alias='SelectiveAuth')
    TrustId_1: TrustId = Field(..., alias='TrustId')


class UpdateTrustResult(BaseModel):
    RequestId_1: Optional[RequestId] = Field(None, alias='RequestId')
    TrustId_1: Optional[TrustId] = Field(None, alias='TrustId')


class UpdateType(Enum):
    OS = 'OS'


class UseSameUsername(RootModel[bool]):
    root: bool


class UserDoesNotExistException(RootModel[Any]):
    root: Any


class UserName(RootModel[constr(pattern=r'[a-zA-Z0-9._-]+', min_length=1)]):
    root: constr(pattern=r'[a-zA-Z0-9._-]+', min_length=1)


class UserPassword(RootModel[SecretStr]):
    root: SecretStr


class VerifyTrustRequest(BaseModel):
    TrustId_1: TrustId = Field(..., alias='TrustId')


class VerifyTrustResult(BaseModel):
    TrustId_1: Optional[TrustId] = Field(None, alias='TrustId')


class VpcId(RootModel[constr(pattern=r'^(vpc-[0-9a-f]{8}|vpc-[0-9a-f]{17})$')]):
    root: constr(pattern=r'^(vpc-[0-9a-f]{8}|vpc-[0-9a-f]{17})$')


class XAmzTarget(Enum):
    DirectoryService_20150416_AcceptSharedDirectory = (
        'DirectoryService_20150416.AcceptSharedDirectory'
    )


class XAmzTarget1(Enum):
    DirectoryService_20150416_AddIpRoutes = 'DirectoryService_20150416.AddIpRoutes'


class XAmzTarget2(Enum):
    DirectoryService_20150416_AddRegion = 'DirectoryService_20150416.AddRegion'


class XAmzTarget3(Enum):
    DirectoryService_20150416_AddTagsToResource = (
        'DirectoryService_20150416.AddTagsToResource'
    )


class XAmzTarget4(Enum):
    DirectoryService_20150416_CancelSchemaExtension = (
        'DirectoryService_20150416.CancelSchemaExtension'
    )


class XAmzTarget5(Enum):
    DirectoryService_20150416_ConnectDirectory = (
        'DirectoryService_20150416.ConnectDirectory'
    )


class XAmzTarget6(Enum):
    DirectoryService_20150416_CreateAlias = 'DirectoryService_20150416.CreateAlias'


class XAmzTarget7(Enum):
    DirectoryService_20150416_CreateComputer = (
        'DirectoryService_20150416.CreateComputer'
    )


class XAmzTarget8(Enum):
    DirectoryService_20150416_CreateConditionalForwarder = (
        'DirectoryService_20150416.CreateConditionalForwarder'
    )


class XAmzTarget9(Enum):
    DirectoryService_20150416_CreateDirectory = (
        'DirectoryService_20150416.CreateDirectory'
    )


class XAmzTarget10(Enum):
    DirectoryService_20150416_CreateLogSubscription = (
        'DirectoryService_20150416.CreateLogSubscription'
    )


class XAmzTarget11(Enum):
    DirectoryService_20150416_CreateMicrosoftAD = (
        'DirectoryService_20150416.CreateMicrosoftAD'
    )


class XAmzTarget12(Enum):
    DirectoryService_20150416_CreateSnapshot = (
        'DirectoryService_20150416.CreateSnapshot'
    )


class XAmzTarget13(Enum):
    DirectoryService_20150416_CreateTrust = 'DirectoryService_20150416.CreateTrust'


class XAmzTarget14(Enum):
    DirectoryService_20150416_DeleteConditionalForwarder = (
        'DirectoryService_20150416.DeleteConditionalForwarder'
    )


class XAmzTarget15(Enum):
    DirectoryService_20150416_DeleteDirectory = (
        'DirectoryService_20150416.DeleteDirectory'
    )


class XAmzTarget16(Enum):
    DirectoryService_20150416_DeleteLogSubscription = (
        'DirectoryService_20150416.DeleteLogSubscription'
    )


class XAmzTarget17(Enum):
    DirectoryService_20150416_DeleteSnapshot = (
        'DirectoryService_20150416.DeleteSnapshot'
    )


class XAmzTarget18(Enum):
    DirectoryService_20150416_DeleteTrust = 'DirectoryService_20150416.DeleteTrust'


class XAmzTarget19(Enum):
    DirectoryService_20150416_DeregisterCertificate = (
        'DirectoryService_20150416.DeregisterCertificate'
    )


class XAmzTarget20(Enum):
    DirectoryService_20150416_DeregisterEventTopic = (
        'DirectoryService_20150416.DeregisterEventTopic'
    )


class XAmzTarget21(Enum):
    DirectoryService_20150416_DescribeCertificate = (
        'DirectoryService_20150416.DescribeCertificate'
    )


class XAmzTarget22(Enum):
    DirectoryService_20150416_DescribeClientAuthenticationSettings = (
        'DirectoryService_20150416.DescribeClientAuthenticationSettings'
    )


class XAmzTarget23(Enum):
    DirectoryService_20150416_DescribeConditionalForwarders = (
        'DirectoryService_20150416.DescribeConditionalForwarders'
    )


class XAmzTarget24(Enum):
    DirectoryService_20150416_DescribeDirectories = (
        'DirectoryService_20150416.DescribeDirectories'
    )


class XAmzTarget25(Enum):
    DirectoryService_20150416_DescribeDomainControllers = (
        'DirectoryService_20150416.DescribeDomainControllers'
    )


class XAmzTarget26(Enum):
    DirectoryService_20150416_DescribeEventTopics = (
        'DirectoryService_20150416.DescribeEventTopics'
    )


class XAmzTarget27(Enum):
    DirectoryService_20150416_DescribeLDAPSSettings = (
        'DirectoryService_20150416.DescribeLDAPSSettings'
    )


class XAmzTarget28(Enum):
    DirectoryService_20150416_DescribeRegions = (
        'DirectoryService_20150416.DescribeRegions'
    )


class XAmzTarget29(Enum):
    DirectoryService_20150416_DescribeSettings = (
        'DirectoryService_20150416.DescribeSettings'
    )


class XAmzTarget30(Enum):
    DirectoryService_20150416_DescribeSharedDirectories = (
        'DirectoryService_20150416.DescribeSharedDirectories'
    )


class XAmzTarget31(Enum):
    DirectoryService_20150416_DescribeSnapshots = (
        'DirectoryService_20150416.DescribeSnapshots'
    )


class XAmzTarget32(Enum):
    DirectoryService_20150416_DescribeTrusts = (
        'DirectoryService_20150416.DescribeTrusts'
    )


class XAmzTarget33(Enum):
    DirectoryService_20150416_DescribeUpdateDirectory = (
        'DirectoryService_20150416.DescribeUpdateDirectory'
    )


class XAmzTarget34(Enum):
    DirectoryService_20150416_DisableClientAuthentication = (
        'DirectoryService_20150416.DisableClientAuthentication'
    )


class XAmzTarget35(Enum):
    DirectoryService_20150416_DisableLDAPS = 'DirectoryService_20150416.DisableLDAPS'


class XAmzTarget36(Enum):
    DirectoryService_20150416_DisableRadius = 'DirectoryService_20150416.DisableRadius'


class XAmzTarget37(Enum):
    DirectoryService_20150416_DisableSso = 'DirectoryService_20150416.DisableSso'


class XAmzTarget38(Enum):
    DirectoryService_20150416_EnableClientAuthentication = (
        'DirectoryService_20150416.EnableClientAuthentication'
    )


class XAmzTarget39(Enum):
    DirectoryService_20150416_EnableLDAPS = 'DirectoryService_20150416.EnableLDAPS'


class XAmzTarget40(Enum):
    DirectoryService_20150416_EnableRadius = 'DirectoryService_20150416.EnableRadius'


class XAmzTarget41(Enum):
    DirectoryService_20150416_EnableSso = 'DirectoryService_20150416.EnableSso'


class XAmzTarget42(Enum):
    DirectoryService_20150416_GetDirectoryLimits = (
        'DirectoryService_20150416.GetDirectoryLimits'
    )


class XAmzTarget43(Enum):
    DirectoryService_20150416_GetSnapshotLimits = (
        'DirectoryService_20150416.GetSnapshotLimits'
    )


class XAmzTarget44(Enum):
    DirectoryService_20150416_ListCertificates = (
        'DirectoryService_20150416.ListCertificates'
    )


class XAmzTarget45(Enum):
    DirectoryService_20150416_ListIpRoutes = 'DirectoryService_20150416.ListIpRoutes'


class XAmzTarget46(Enum):
    DirectoryService_20150416_ListLogSubscriptions = (
        'DirectoryService_20150416.ListLogSubscriptions'
    )


class XAmzTarget47(Enum):
    DirectoryService_20150416_ListSchemaExtensions = (
        'DirectoryService_20150416.ListSchemaExtensions'
    )


class XAmzTarget48(Enum):
    DirectoryService_20150416_ListTagsForResource = (
        'DirectoryService_20150416.ListTagsForResource'
    )


class XAmzTarget49(Enum):
    DirectoryService_20150416_RegisterCertificate = (
        'DirectoryService_20150416.RegisterCertificate'
    )


class XAmzTarget50(Enum):
    DirectoryService_20150416_RegisterEventTopic = (
        'DirectoryService_20150416.RegisterEventTopic'
    )


class XAmzTarget51(Enum):
    DirectoryService_20150416_RejectSharedDirectory = (
        'DirectoryService_20150416.RejectSharedDirectory'
    )


class XAmzTarget52(Enum):
    DirectoryService_20150416_RemoveIpRoutes = (
        'DirectoryService_20150416.RemoveIpRoutes'
    )


class XAmzTarget53(Enum):
    DirectoryService_20150416_RemoveRegion = 'DirectoryService_20150416.RemoveRegion'


class XAmzTarget54(Enum):
    DirectoryService_20150416_RemoveTagsFromResource = (
        'DirectoryService_20150416.RemoveTagsFromResource'
    )


class XAmzTarget55(Enum):
    DirectoryService_20150416_ResetUserPassword = (
        'DirectoryService_20150416.ResetUserPassword'
    )


class XAmzTarget56(Enum):
    DirectoryService_20150416_RestoreFromSnapshot = (
        'DirectoryService_20150416.RestoreFromSnapshot'
    )


class XAmzTarget57(Enum):
    DirectoryService_20150416_ShareDirectory = (
        'DirectoryService_20150416.ShareDirectory'
    )


class XAmzTarget58(Enum):
    DirectoryService_20150416_StartSchemaExtension = (
        'DirectoryService_20150416.StartSchemaExtension'
    )


class XAmzTarget59(Enum):
    DirectoryService_20150416_UnshareDirectory = (
        'DirectoryService_20150416.UnshareDirectory'
    )


class XAmzTarget60(Enum):
    DirectoryService_20150416_UpdateConditionalForwarder = (
        'DirectoryService_20150416.UpdateConditionalForwarder'
    )


class XAmzTarget61(Enum):
    DirectoryService_20150416_UpdateDirectorySetup = (
        'DirectoryService_20150416.UpdateDirectorySetup'
    )


class XAmzTarget62(Enum):
    DirectoryService_20150416_UpdateNumberOfDomainControllers = (
        'DirectoryService_20150416.UpdateNumberOfDomainControllers'
    )


class XAmzTarget63(Enum):
    DirectoryService_20150416_UpdateRadius = 'DirectoryService_20150416.UpdateRadius'


class XAmzTarget64(Enum):
    DirectoryService_20150416_UpdateSettings = (
        'DirectoryService_20150416.UpdateSettings'
    )


class XAmzTarget65(Enum):
    DirectoryService_20150416_UpdateTrust = 'DirectoryService_20150416.UpdateTrust'


class XAmzTarget66(Enum):
    DirectoryService_20150416_VerifyTrust = 'DirectoryService_20150416.VerifyTrust'


class AcceptSharedDirectoryRequest(BaseModel):
    SharedDirectoryId: DirectoryId


class AcceptSharedDirectoryResult(BaseModel):
    SharedDirectory_1: Optional[SharedDirectory] = Field(None, alias='SharedDirectory')


class AddIpRoutesRequest(BaseModel):
    DirectoryId_1: DirectoryId = Field(..., alias='DirectoryId')
    IpRoutes_1: IpRoutes = Field(..., alias='IpRoutes')
    UpdateSecurityGroupForDirectoryControllers_1: Optional[
        UpdateSecurityGroupForDirectoryControllers
    ] = Field(None, alias='UpdateSecurityGroupForDirectoryControllers')


class AdditionalRegions(RootModel[List[RegionName]]):
    root: List[RegionName]


class Attribute(BaseModel):
    Name: Optional[AttributeName] = None
    Value: Optional[AttributeValue] = None


class Attributes(RootModel[List[Attribute]]):
    root: List[Attribute]


class CancelSchemaExtensionRequest(BaseModel):
    DirectoryId_1: DirectoryId = Field(..., alias='DirectoryId')
    SchemaExtensionId_1: SchemaExtensionId = Field(..., alias='SchemaExtensionId')


class CertificateInfo(BaseModel):
    CertificateId_1: Optional[CertificateId] = Field(None, alias='CertificateId')
    CommonName: Optional[CertificateCN] = None
    ExpiryDateTime: Optional[CertificateExpiryDateTime] = None
    State: Optional[CertificateState] = None
    Type: Optional[CertificateType] = None


class CertificatesInfo(RootModel[List[CertificateInfo]]):
    root: List[CertificateInfo]


class ClientAuthenticationSettingInfo(BaseModel):
    LastUpdatedDateTime_1: Optional[LastUpdatedDateTime] = Field(
        None, alias='LastUpdatedDateTime'
    )
    Status: Optional[ClientAuthenticationStatus] = None
    Type: Optional[ClientAuthenticationType] = None


class ClientAuthenticationSettingsInfo(
    RootModel[List[ClientAuthenticationSettingInfo]]
):
    root: List[ClientAuthenticationSettingInfo]


class ClientCertAuthSettings(BaseModel):
    OCSPUrl_1: Optional[OCSPUrl] = Field(None, alias='OCSPUrl')


class Computer(BaseModel):
    ComputerAttributes: Optional[Attributes] = None
    ComputerId: Optional[SID] = None
    ComputerName_1: Optional[ComputerName] = Field(None, alias='ComputerName')


class ConnectDirectoryResult(BaseModel):
    DirectoryId_1: Optional[DirectoryId] = Field(None, alias='DirectoryId')


class CreateAliasRequest(BaseModel):
    Alias: AliasName
    DirectoryId_1: DirectoryId = Field(..., alias='DirectoryId')


class CreateAliasResult(BaseModel):
    Alias: Optional[AliasName] = None
    DirectoryId_1: Optional[DirectoryId] = Field(None, alias='DirectoryId')


class CreateComputerRequest(BaseModel):
    ComputerAttributes: Optional[Attributes] = None
    ComputerName_1: ComputerName = Field(..., alias='ComputerName')
    DirectoryId_1: DirectoryId = Field(..., alias='DirectoryId')
    OrganizationalUnitDistinguishedName: Optional[OrganizationalUnitDN] = None
    Password: ComputerPassword


class CreateComputerResult(BaseModel):
    Computer_1: Optional[Computer] = Field(None, alias='Computer')


class CreateDirectoryResult(BaseModel):
    DirectoryId_1: Optional[DirectoryId] = Field(None, alias='DirectoryId')


class CreateLogSubscriptionRequest(BaseModel):
    DirectoryId_1: DirectoryId = Field(..., alias='DirectoryId')
    LogGroupName_1: LogGroupName = Field(..., alias='LogGroupName')


class CreateMicrosoftADResult(BaseModel):
    DirectoryId_1: Optional[DirectoryId] = Field(None, alias='DirectoryId')


class CreateSnapshotRequest(BaseModel):
    DirectoryId_1: DirectoryId = Field(..., alias='DirectoryId')
    Name: Optional[SnapshotName] = None


class CreateSnapshotResult(BaseModel):
    SnapshotId_1: Optional[SnapshotId] = Field(None, alias='SnapshotId')


class CreateTrustResult(BaseModel):
    TrustId_1: Optional[TrustId] = Field(None, alias='TrustId')


class DeleteConditionalForwarderRequest(BaseModel):
    DirectoryId_1: DirectoryId = Field(..., alias='DirectoryId')
    RemoteDomainName_1: RemoteDomainName = Field(..., alias='RemoteDomainName')


class DeleteDirectoryRequest(BaseModel):
    DirectoryId_1: DirectoryId = Field(..., alias='DirectoryId')


class DeleteDirectoryResult(BaseModel):
    DirectoryId_1: Optional[DirectoryId] = Field(None, alias='DirectoryId')


class DeleteLogSubscriptionRequest(BaseModel):
    DirectoryId_1: DirectoryId = Field(..., alias='DirectoryId')


class DeleteSnapshotRequest(BaseModel):
    SnapshotId_1: SnapshotId = Field(..., alias='SnapshotId')


class DeleteSnapshotResult(BaseModel):
    SnapshotId_1: Optional[SnapshotId] = Field(None, alias='SnapshotId')


class DeleteTrustRequest(BaseModel):
    DeleteAssociatedConditionalForwarder_1: Optional[
        DeleteAssociatedConditionalForwarder
    ] = Field(None, alias='DeleteAssociatedConditionalForwarder')
    TrustId_1: TrustId = Field(..., alias='TrustId')


class DeleteTrustResult(BaseModel):
    TrustId_1: Optional[TrustId] = Field(None, alias='TrustId')


class DeregisterCertificateRequest(BaseModel):
    CertificateId_1: CertificateId = Field(..., alias='CertificateId')
    DirectoryId_1: DirectoryId = Field(..., alias='DirectoryId')


class DeregisterEventTopicRequest(BaseModel):
    DirectoryId_1: DirectoryId = Field(..., alias='DirectoryId')
    TopicName_1: TopicName = Field(..., alias='TopicName')


class DescribeCertificateRequest(BaseModel):
    CertificateId_1: CertificateId = Field(..., alias='CertificateId')
    DirectoryId_1: DirectoryId = Field(..., alias='DirectoryId')


class DescribeClientAuthenticationSettingsRequest(BaseModel):
    DirectoryId_1: DirectoryId = Field(..., alias='DirectoryId')
    Limit: Optional[PageLimit] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Type: Optional[ClientAuthenticationType] = None


class DescribeClientAuthenticationSettingsResult(BaseModel):
    ClientAuthenticationSettingsInfo_1: Optional[ClientAuthenticationSettingsInfo] = (
        Field(None, alias='ClientAuthenticationSettingsInfo')
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeConditionalForwardersRequest(BaseModel):
    DirectoryId_1: DirectoryId = Field(..., alias='DirectoryId')
    RemoteDomainNames_1: Optional[RemoteDomainNames] = Field(
        None, alias='RemoteDomainNames'
    )


class DescribeDirectoriesRequest(BaseModel):
    DirectoryIds_1: Optional[DirectoryIds] = Field(None, alias='DirectoryIds')
    Limit_1: Optional[Limit] = Field(None, alias='Limit')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeDomainControllersRequest(BaseModel):
    DirectoryId_1: DirectoryId = Field(..., alias='DirectoryId')
    DomainControllerIds_1: Optional[DomainControllerIds] = Field(
        None, alias='DomainControllerIds'
    )
    Limit_1: Optional[Limit] = Field(None, alias='Limit')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeEventTopicsRequest(BaseModel):
    DirectoryId_1: Optional[DirectoryId] = Field(None, alias='DirectoryId')
    TopicNames_1: Optional[TopicNames] = Field(None, alias='TopicNames')


class DescribeLDAPSSettingsRequest(BaseModel):
    DirectoryId_1: DirectoryId = Field(..., alias='DirectoryId')
    Limit: Optional[PageLimit] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Type: Optional[LDAPSType] = None


class DescribeRegionsRequest(BaseModel):
    DirectoryId_1: DirectoryId = Field(..., alias='DirectoryId')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    RegionName_1: Optional[RegionName] = Field(None, alias='RegionName')


class DescribeSettingsRequest(BaseModel):
    DirectoryId_1: DirectoryId = Field(..., alias='DirectoryId')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Status: Optional[DirectoryConfigurationStatus] = None


class DescribeSharedDirectoriesRequest(BaseModel):
    Limit_1: Optional[Limit] = Field(None, alias='Limit')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    OwnerDirectoryId: DirectoryId
    SharedDirectoryIds: Optional[DirectoryIds] = None


class DescribeSnapshotsRequest(BaseModel):
    DirectoryId_1: Optional[DirectoryId] = Field(None, alias='DirectoryId')
    Limit_1: Optional[Limit] = Field(None, alias='Limit')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SnapshotIds_1: Optional[SnapshotIds] = Field(None, alias='SnapshotIds')


class DescribeTrustsRequest(BaseModel):
    DirectoryId_1: Optional[DirectoryId] = Field(None, alias='DirectoryId')
    Limit_1: Optional[Limit] = Field(None, alias='Limit')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    TrustIds_1: Optional[TrustIds] = Field(None, alias='TrustIds')


class DescribeUpdateDirectoryRequest(BaseModel):
    DirectoryId_1: DirectoryId = Field(..., alias='DirectoryId')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    RegionName_1: Optional[RegionName] = Field(None, alias='RegionName')
    UpdateType_1: UpdateType = Field(..., alias='UpdateType')


class DirectoryConfigurationSettingRequestDetailedStatus(
    RootModel[Optional[Dict[str, DirectoryConfigurationStatus]]]
):
    root: Optional[Dict[str, DirectoryConfigurationStatus]] = None


class DirectoryConnectSettingsDescription(BaseModel):
    AvailabilityZones_1: Optional[AvailabilityZones] = Field(
        None, alias='AvailabilityZones'
    )
    ConnectIps: Optional[IpAddrs] = None
    CustomerUserName: Optional[UserName] = None
    SecurityGroupId_1: Optional[SecurityGroupId] = Field(None, alias='SecurityGroupId')
    SubnetIds_1: Optional[SubnetIds] = Field(None, alias='SubnetIds')
    VpcId_1: Optional[VpcId] = Field(None, alias='VpcId')


class DirectoryLimits(BaseModel):
    CloudOnlyDirectoriesCurrentCount: Optional[Limit] = None
    CloudOnlyDirectoriesLimit: Optional[Limit] = None
    CloudOnlyDirectoriesLimitReached_1: Optional[CloudOnlyDirectoriesLimitReached] = (
        Field(None, alias='CloudOnlyDirectoriesLimitReached')
    )
    CloudOnlyMicrosoftADCurrentCount: Optional[Limit] = None
    CloudOnlyMicrosoftADLimit: Optional[Limit] = None
    CloudOnlyMicrosoftADLimitReached: Optional[CloudOnlyDirectoriesLimitReached] = None
    ConnectedDirectoriesCurrentCount: Optional[Limit] = None
    ConnectedDirectoriesLimit: Optional[Limit] = None
    ConnectedDirectoriesLimitReached_1: Optional[ConnectedDirectoriesLimitReached] = (
        Field(None, alias='ConnectedDirectoriesLimitReached')
    )


class DirectoryVpcSettings(BaseModel):
    SubnetIds_1: SubnetIds = Field(..., alias='SubnetIds')
    VpcId_1: VpcId = Field(..., alias='VpcId')


class DirectoryVpcSettingsDescription(BaseModel):
    AvailabilityZones_1: Optional[AvailabilityZones] = Field(
        None, alias='AvailabilityZones'
    )
    SecurityGroupId_1: Optional[SecurityGroupId] = Field(None, alias='SecurityGroupId')
    SubnetIds_1: Optional[SubnetIds] = Field(None, alias='SubnetIds')
    VpcId_1: Optional[VpcId] = Field(None, alias='VpcId')


class DisableLDAPSRequest(BaseModel):
    DirectoryId_1: DirectoryId = Field(..., alias='DirectoryId')
    Type: LDAPSType


class DisableSsoRequest(BaseModel):
    DirectoryId_1: DirectoryId = Field(..., alias='DirectoryId')
    Password: Optional[ConnectPassword] = None
    UserName_1: Optional[UserName] = Field(None, alias='UserName')


class DnsIpAddrs(RootModel[List[IpAddr]]):
    root: List[IpAddr]


class DomainController(BaseModel):
    AvailabilityZone_1: Optional[AvailabilityZone] = Field(
        None, alias='AvailabilityZone'
    )
    DirectoryId_1: Optional[DirectoryId] = Field(None, alias='DirectoryId')
    DnsIpAddr: Optional[IpAddr] = None
    DomainControllerId_1: Optional[DomainControllerId] = Field(
        None, alias='DomainControllerId'
    )
    LaunchTime_1: Optional[LaunchTime] = Field(None, alias='LaunchTime')
    Status: Optional[DomainControllerStatus] = None
    StatusLastUpdatedDateTime: Optional[LastUpdatedDateTime] = None
    StatusReason: Optional[DomainControllerStatusReason] = None
    SubnetId_1: Optional[SubnetId] = Field(None, alias='SubnetId')
    VpcId_1: Optional[VpcId] = Field(None, alias='VpcId')


class DomainControllers(RootModel[List[DomainController]]):
    root: List[DomainController]


class EnableLDAPSRequest(BaseModel):
    DirectoryId_1: DirectoryId = Field(..., alias='DirectoryId')
    Type: LDAPSType


class EnableSsoRequest(BaseModel):
    DirectoryId_1: DirectoryId = Field(..., alias='DirectoryId')
    Password: Optional[ConnectPassword] = None
    UserName_1: Optional[UserName] = Field(None, alias='UserName')


class EventTopic(BaseModel):
    CreatedDateTime_1: Optional[CreatedDateTime] = Field(None, alias='CreatedDateTime')
    DirectoryId_1: Optional[DirectoryId] = Field(None, alias='DirectoryId')
    Status: Optional[TopicStatus] = None
    TopicArn_1: Optional[TopicArn] = Field(None, alias='TopicArn')
    TopicName_1: Optional[TopicName] = Field(None, alias='TopicName')


class EventTopics(RootModel[List[EventTopic]]):
    root: List[EventTopic]


class GetDirectoryLimitsResult(BaseModel):
    DirectoryLimits_1: Optional[DirectoryLimits] = Field(None, alias='DirectoryLimits')


class GetSnapshotLimitsResult(BaseModel):
    SnapshotLimits_1: Optional[SnapshotLimits] = Field(None, alias='SnapshotLimits')


class IpRouteInfo(BaseModel):
    AddedDateTime_1: Optional[AddedDateTime] = Field(None, alias='AddedDateTime')
    CidrIp_1: Optional[CidrIp] = Field(None, alias='CidrIp')
    Description_1: Optional[Description] = Field(None, alias='Description')
    DirectoryId_1: Optional[DirectoryId] = Field(None, alias='DirectoryId')
    IpRouteStatusMsg_1: Optional[IpRouteStatusMsg] = Field(
        None, alias='IpRouteStatusMsg'
    )
    IpRouteStatusReason_1: Optional[IpRouteStatusReason] = Field(
        None, alias='IpRouteStatusReason'
    )


class IpRoutesInfo(RootModel[List[IpRouteInfo]]):
    root: List[IpRouteInfo]


class LDAPSSettingInfo(BaseModel):
    LDAPSStatus_1: Optional[LDAPSStatus] = Field(None, alias='LDAPSStatus')
    LDAPSStatusReason_1: Optional[LDAPSStatusReason] = Field(
        None, alias='LDAPSStatusReason'
    )
    LastUpdatedDateTime_1: Optional[LastUpdatedDateTime] = Field(
        None, alias='LastUpdatedDateTime'
    )


class LDAPSSettingsInfo(RootModel[List[LDAPSSettingInfo]]):
    root: List[LDAPSSettingInfo]


class ListCertificatesRequest(BaseModel):
    DirectoryId_1: DirectoryId = Field(..., alias='DirectoryId')
    Limit: Optional[PageLimit] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListCertificatesResult(BaseModel):
    CertificatesInfo_1: Optional[CertificatesInfo] = Field(
        None, alias='CertificatesInfo'
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListIpRoutesRequest(BaseModel):
    DirectoryId_1: DirectoryId = Field(..., alias='DirectoryId')
    Limit_1: Optional[Limit] = Field(None, alias='Limit')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListIpRoutesResult(BaseModel):
    IpRoutesInfo_1: Optional[IpRoutesInfo] = Field(None, alias='IpRoutesInfo')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListLogSubscriptionsRequest(BaseModel):
    DirectoryId_1: Optional[DirectoryId] = Field(None, alias='DirectoryId')
    Limit_1: Optional[Limit] = Field(None, alias='Limit')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListSchemaExtensionsRequest(BaseModel):
    DirectoryId_1: DirectoryId = Field(..., alias='DirectoryId')
    Limit_1: Optional[Limit] = Field(None, alias='Limit')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListTagsForResourceRequest(BaseModel):
    Limit_1: Optional[Limit] = Field(None, alias='Limit')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    ResourceId_1: ResourceId = Field(..., alias='ResourceId')


class LogSubscription(BaseModel):
    DirectoryId_1: Optional[DirectoryId] = Field(None, alias='DirectoryId')
    LogGroupName_1: Optional[LogGroupName] = Field(None, alias='LogGroupName')
    SubscriptionCreatedDateTime_1: Optional[SubscriptionCreatedDateTime] = Field(
        None, alias='SubscriptionCreatedDateTime'
    )


class LogSubscriptions(RootModel[List[LogSubscription]]):
    root: List[LogSubscription]


class OSUpdateSettings(BaseModel):
    OSVersion_1: Optional[OSVersion] = Field(None, alias='OSVersion')


class RadiusSettings(BaseModel):
    AuthenticationProtocol: Optional[RadiusAuthenticationProtocol] = None
    DisplayLabel: Optional[RadiusDisplayLabel] = None
    RadiusPort: Optional[PortNumber] = None
    RadiusRetries_1: Optional[RadiusRetries] = Field(None, alias='RadiusRetries')
    RadiusServers: Optional[Servers] = None
    RadiusTimeout_1: Optional[RadiusTimeout] = Field(None, alias='RadiusTimeout')
    SharedSecret: Optional[RadiusSharedSecret] = None
    UseSameUsername_1: Optional[UseSameUsername] = Field(None, alias='UseSameUsername')


class RegionDescription(BaseModel):
    DesiredNumberOfDomainControllers_1: Optional[DesiredNumberOfDomainControllers] = (
        Field(None, alias='DesiredNumberOfDomainControllers')
    )
    DirectoryId_1: Optional[DirectoryId] = Field(None, alias='DirectoryId')
    LastUpdatedDateTime_1: Optional[LastUpdatedDateTime] = Field(
        None, alias='LastUpdatedDateTime'
    )
    LaunchTime_1: Optional[LaunchTime] = Field(None, alias='LaunchTime')
    RegionName_1: Optional[RegionName] = Field(None, alias='RegionName')
    RegionType_1: Optional[RegionType] = Field(None, alias='RegionType')
    Status: Optional[DirectoryStage] = None
    StatusLastUpdatedDateTime: Optional[StateLastUpdatedDateTime] = None
    VpcSettings: Optional[DirectoryVpcSettings] = None


class RegionsDescription(RootModel[List[RegionDescription]]):
    root: List[RegionDescription]


class RegionsInfo(BaseModel):
    AdditionalRegions_1: Optional[AdditionalRegions] = Field(
        None, alias='AdditionalRegions'
    )
    PrimaryRegion: Optional[RegionName] = None


class RegisterCertificateRequest(BaseModel):
    CertificateData_1: CertificateData = Field(..., alias='CertificateData')
    ClientCertAuthSettings_1: Optional[ClientCertAuthSettings] = Field(
        None, alias='ClientCertAuthSettings'
    )
    DirectoryId_1: DirectoryId = Field(..., alias='DirectoryId')
    Type: Optional[CertificateType] = None


class RegisterEventTopicRequest(BaseModel):
    DirectoryId_1: DirectoryId = Field(..., alias='DirectoryId')
    TopicName_1: TopicName = Field(..., alias='TopicName')


class RemoveTagsFromResourceRequest(BaseModel):
    ResourceId_1: ResourceId = Field(..., alias='ResourceId')
    TagKeys_1: TagKeys = Field(..., alias='TagKeys')


class ResetUserPasswordRequest(BaseModel):
    DirectoryId_1: DirectoryId = Field(..., alias='DirectoryId')
    NewPassword: UserPassword
    UserName: CustomerUserName


class RestoreFromSnapshotRequest(BaseModel):
    SnapshotId_1: SnapshotId = Field(..., alias='SnapshotId')


class SchemaExtensionInfo(BaseModel):
    Description_1: Optional[Description] = Field(None, alias='Description')
    DirectoryId_1: Optional[DirectoryId] = Field(None, alias='DirectoryId')
    EndDateTime_1: Optional[EndDateTime] = Field(None, alias='EndDateTime')
    SchemaExtensionId_1: Optional[SchemaExtensionId] = Field(
        None, alias='SchemaExtensionId'
    )
    SchemaExtensionStatus_1: Optional[SchemaExtensionStatus] = Field(
        None, alias='SchemaExtensionStatus'
    )
    SchemaExtensionStatusReason_1: Optional[SchemaExtensionStatusReason] = Field(
        None, alias='SchemaExtensionStatusReason'
    )
    StartDateTime_1: Optional[StartDateTime] = Field(None, alias='StartDateTime')


class SchemaExtensionsInfo(RootModel[List[SchemaExtensionInfo]]):
    root: List[SchemaExtensionInfo]


class SettingEntry(BaseModel):
    AllowedValues: Optional[DirectoryConfigurationSettingAllowedValues] = None
    AppliedValue: Optional[DirectoryConfigurationSettingValue] = None
    LastRequestedDateTime: Optional[
        DirectoryConfigurationSettingLastRequestedDateTime
    ] = None
    LastUpdatedDateTime: Optional[DirectoryConfigurationSettingLastUpdatedDateTime] = (
        None
    )
    Name: Optional[DirectoryConfigurationSettingName] = None
    RequestDetailedStatus: Optional[
        DirectoryConfigurationSettingRequestDetailedStatus
    ] = None
    RequestStatus: Optional[DirectoryConfigurationStatus] = None
    RequestStatusMessage: Optional[
        DirectoryConfigurationSettingRequestStatusMessage
    ] = None
    RequestedValue: Optional[DirectoryConfigurationSettingValue] = None
    Type: Optional[DirectoryConfigurationSettingType] = None


class ShareTarget(BaseModel):
    Id: TargetId
    Type: TargetType


class SharedDirectories(RootModel[List[SharedDirectory]]):
    root: List[SharedDirectory]


class Snapshot(BaseModel):
    DirectoryId_1: Optional[DirectoryId] = Field(None, alias='DirectoryId')
    Name: Optional[SnapshotName] = None
    SnapshotId_1: Optional[SnapshotId] = Field(None, alias='SnapshotId')
    StartTime_1: Optional[StartTime] = Field(None, alias='StartTime')
    Status: Optional[SnapshotStatus] = None
    Type: Optional[SnapshotType] = None


class Snapshots(RootModel[List[Snapshot]]):
    root: List[Snapshot] = Field(
        ..., description='A list of descriptions of directory snapshots.'
    )


class Tag(BaseModel):
    Key: TagKey
    Value: TagValue


class Tags(RootModel[List[Tag]]):
    root: List[Tag]


class Trust(BaseModel):
    CreatedDateTime_1: Optional[CreatedDateTime] = Field(None, alias='CreatedDateTime')
    DirectoryId_1: Optional[DirectoryId] = Field(None, alias='DirectoryId')
    LastUpdatedDateTime_1: Optional[LastUpdatedDateTime] = Field(
        None, alias='LastUpdatedDateTime'
    )
    RemoteDomainName_1: Optional[RemoteDomainName] = Field(
        None, alias='RemoteDomainName'
    )
    SelectiveAuth_1: Optional[SelectiveAuth] = Field(None, alias='SelectiveAuth')
    StateLastUpdatedDateTime_1: Optional[StateLastUpdatedDateTime] = Field(
        None, alias='StateLastUpdatedDateTime'
    )
    TrustDirection_1: Optional[TrustDirection] = Field(None, alias='TrustDirection')
    TrustId_1: Optional[TrustId] = Field(None, alias='TrustId')
    TrustState_1: Optional[TrustState] = Field(None, alias='TrustState')
    TrustStateReason_1: Optional[TrustStateReason] = Field(
        None, alias='TrustStateReason'
    )
    TrustType_1: Optional[TrustType] = Field(None, alias='TrustType')


class Trusts(RootModel[List[Trust]]):
    root: List[Trust]


class UnshareDirectoryRequest(BaseModel):
    DirectoryId_1: DirectoryId = Field(..., alias='DirectoryId')
    UnshareTarget_1: UnshareTarget = Field(..., alias='UnshareTarget')


class UpdateConditionalForwarderRequest(BaseModel):
    DirectoryId_1: DirectoryId = Field(..., alias='DirectoryId')
    DnsIpAddrs_1: DnsIpAddrs = Field(..., alias='DnsIpAddrs')
    RemoteDomainName_1: RemoteDomainName = Field(..., alias='RemoteDomainName')


class UpdateDirectorySetupRequest(BaseModel):
    CreateSnapshotBeforeUpdate_1: Optional[CreateSnapshotBeforeUpdate] = Field(
        None, alias='CreateSnapshotBeforeUpdate'
    )
    DirectoryId_1: DirectoryId = Field(..., alias='DirectoryId')
    OSUpdateSettings_1: Optional[OSUpdateSettings] = Field(
        None, alias='OSUpdateSettings'
    )
    UpdateType_1: UpdateType = Field(..., alias='UpdateType')


class UpdateRadiusRequest(BaseModel):
    DirectoryId_1: DirectoryId = Field(..., alias='DirectoryId')
    RadiusSettings_1: RadiusSettings = Field(..., alias='RadiusSettings')


class UpdateValue(BaseModel):
    OSUpdateSettings_1: Optional[OSUpdateSettings] = Field(
        None, alias='OSUpdateSettings'
    )


class AddRegionRequest(BaseModel):
    DirectoryId_1: DirectoryId = Field(..., alias='DirectoryId')
    RegionName_1: RegionName = Field(..., alias='RegionName')
    VPCSettings: DirectoryVpcSettings


class AddTagsToResourceRequest(BaseModel):
    ResourceId_1: ResourceId = Field(..., alias='ResourceId')
    Tags_1: Tags = Field(..., alias='Tags')


class Certificate(BaseModel):
    CertificateId_1: Optional[CertificateId] = Field(None, alias='CertificateId')
    ClientCertAuthSettings_1: Optional[ClientCertAuthSettings] = Field(
        None, alias='ClientCertAuthSettings'
    )
    CommonName: Optional[CertificateCN] = None
    ExpiryDateTime: Optional[CertificateExpiryDateTime] = None
    RegisteredDateTime: Optional[CertificateRegisteredDateTime] = None
    State: Optional[CertificateState] = None
    StateReason: Optional[CertificateStateReason] = None
    Type: Optional[CertificateType] = None


class ConditionalForwarder(BaseModel):
    DnsIpAddrs_1: Optional[DnsIpAddrs] = Field(None, alias='DnsIpAddrs')
    RemoteDomainName_1: Optional[RemoteDomainName] = Field(
        None, alias='RemoteDomainName'
    )
    ReplicationScope_1: Optional[ReplicationScope] = Field(
        None, alias='ReplicationScope'
    )


class ConditionalForwarders(RootModel[List[ConditionalForwarder]]):
    root: List[ConditionalForwarder]


class CreateConditionalForwarderRequest(BaseModel):
    DirectoryId_1: DirectoryId = Field(..., alias='DirectoryId')
    DnsIpAddrs_1: DnsIpAddrs = Field(..., alias='DnsIpAddrs')
    RemoteDomainName_1: RemoteDomainName = Field(..., alias='RemoteDomainName')


class CreateDirectoryRequest(BaseModel):
    Description_1: Optional[Description] = Field(None, alias='Description')
    Name: DirectoryName
    Password_1: Password = Field(..., alias='Password')
    ShortName: Optional[DirectoryShortName] = None
    Size: DirectorySize
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    VpcSettings: Optional[DirectoryVpcSettings] = None


class CreateMicrosoftADRequest(BaseModel):
    Description_1: Optional[Description] = Field(None, alias='Description')
    Edition: Optional[DirectoryEdition] = None
    Name: DirectoryName
    Password_1: Password = Field(..., alias='Password')
    ShortName: Optional[DirectoryShortName] = None
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    VpcSettings: DirectoryVpcSettings


class CreateTrustRequest(BaseModel):
    ConditionalForwarderIpAddrs: Optional[DnsIpAddrs] = None
    DirectoryId_1: DirectoryId = Field(..., alias='DirectoryId')
    RemoteDomainName_1: RemoteDomainName = Field(..., alias='RemoteDomainName')
    SelectiveAuth_1: Optional[SelectiveAuth] = Field(None, alias='SelectiveAuth')
    TrustDirection_1: TrustDirection = Field(..., alias='TrustDirection')
    TrustPassword_1: TrustPassword = Field(..., alias='TrustPassword')
    TrustType_1: Optional[TrustType] = Field(None, alias='TrustType')


class DescribeCertificateResult(BaseModel):
    Certificate_1: Optional[Certificate] = Field(None, alias='Certificate')


class DescribeConditionalForwardersResult(BaseModel):
    ConditionalForwarders_1: Optional[ConditionalForwarders] = Field(
        None, alias='ConditionalForwarders'
    )


class DescribeDomainControllersResult(BaseModel):
    DomainControllers_1: Optional[DomainControllers] = Field(
        None, alias='DomainControllers'
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeEventTopicsResult(BaseModel):
    EventTopics_1: Optional[EventTopics] = Field(None, alias='EventTopics')


class DescribeLDAPSSettingsResult(BaseModel):
    LDAPSSettingsInfo_1: Optional[LDAPSSettingsInfo] = Field(
        None, alias='LDAPSSettingsInfo'
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeRegionsResult(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    RegionsDescription_1: Optional[RegionsDescription] = Field(
        None, alias='RegionsDescription'
    )


class DescribeSharedDirectoriesResult(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SharedDirectories_1: Optional[SharedDirectories] = Field(
        None, alias='SharedDirectories'
    )


class DescribeSnapshotsResult(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Snapshots_1: Optional[Snapshots] = Field(None, alias='Snapshots')


class DescribeTrustsResult(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Trusts_1: Optional[Trusts] = Field(None, alias='Trusts')


class DirectoryConnectSettings(BaseModel):
    CustomerDnsIps: DnsIpAddrs
    CustomerUserName: UserName
    SubnetIds_1: SubnetIds = Field(..., alias='SubnetIds')
    VpcId_1: VpcId = Field(..., alias='VpcId')


class EnableRadiusRequest(BaseModel):
    DirectoryId_1: DirectoryId = Field(..., alias='DirectoryId')
    RadiusSettings_1: RadiusSettings = Field(..., alias='RadiusSettings')


class ListLogSubscriptionsResult(BaseModel):
    LogSubscriptions_1: Optional[LogSubscriptions] = Field(
        None, alias='LogSubscriptions'
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListSchemaExtensionsResult(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SchemaExtensionsInfo_1: Optional[SchemaExtensionsInfo] = Field(
        None, alias='SchemaExtensionsInfo'
    )


class ListTagsForResourceResult(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Tags_1: Optional[Tags] = Field(None, alias='Tags')


class OwnerDirectoryDescription(BaseModel):
    AccountId: Optional[CustomerId] = None
    DirectoryId_1: Optional[DirectoryId] = Field(None, alias='DirectoryId')
    DnsIpAddrs_1: Optional[DnsIpAddrs] = Field(None, alias='DnsIpAddrs')
    RadiusSettings_1: Optional[RadiusSettings] = Field(None, alias='RadiusSettings')
    RadiusStatus_1: Optional[RadiusStatus] = Field(None, alias='RadiusStatus')
    VpcSettings: Optional[DirectoryVpcSettingsDescription] = None


class SettingEntries(RootModel[List[SettingEntry]]):
    root: List[SettingEntry]


class ShareDirectoryRequest(BaseModel):
    DirectoryId_1: DirectoryId = Field(..., alias='DirectoryId')
    ShareMethod_1: ShareMethod = Field(..., alias='ShareMethod')
    ShareNotes: Optional[Notes] = None
    ShareTarget_1: ShareTarget = Field(..., alias='ShareTarget')


class UpdateInfoEntry(BaseModel):
    InitiatedBy_1: Optional[InitiatedBy] = Field(None, alias='InitiatedBy')
    LastUpdatedDateTime_1: Optional[LastUpdatedDateTime] = Field(
        None, alias='LastUpdatedDateTime'
    )
    NewValue: Optional[UpdateValue] = None
    PreviousValue: Optional[UpdateValue] = None
    Region: Optional[RegionName] = None
    StartTime: Optional[StartDateTime] = None
    Status: Optional[UpdateStatus] = None
    StatusReason: Optional[UpdateStatusReason] = None


class ConnectDirectoryRequest(BaseModel):
    ConnectSettings: DirectoryConnectSettings
    Description_1: Optional[Description] = Field(None, alias='Description')
    Name: DirectoryName
    Password: ConnectPassword
    ShortName: Optional[DirectoryShortName] = None
    Size: DirectorySize
    Tags_1: Optional[Tags] = Field(None, alias='Tags')


class DescribeSettingsResult(BaseModel):
    DirectoryId_1: Optional[DirectoryId] = Field(None, alias='DirectoryId')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SettingEntries_1: Optional[SettingEntries] = Field(None, alias='SettingEntries')


class DirectoryDescription(BaseModel):
    AccessUrl_1: Optional[AccessUrl] = Field(None, alias='AccessUrl')
    Alias: Optional[AliasName] = None
    ConnectSettings: Optional[DirectoryConnectSettingsDescription] = None
    Description_1: Optional[Description] = Field(None, alias='Description')
    DesiredNumberOfDomainControllers_1: Optional[DesiredNumberOfDomainControllers] = (
        Field(None, alias='DesiredNumberOfDomainControllers')
    )
    DirectoryId_1: Optional[DirectoryId] = Field(None, alias='DirectoryId')
    DnsIpAddrs_1: Optional[DnsIpAddrs] = Field(None, alias='DnsIpAddrs')
    Edition: Optional[DirectoryEdition] = None
    LaunchTime_1: Optional[LaunchTime] = Field(None, alias='LaunchTime')
    Name: Optional[DirectoryName] = None
    OsVersion: Optional[OSVersion] = None
    OwnerDirectoryDescription_1: Optional[OwnerDirectoryDescription] = Field(
        None, alias='OwnerDirectoryDescription'
    )
    RadiusSettings_1: Optional[RadiusSettings] = Field(None, alias='RadiusSettings')
    RadiusStatus_1: Optional[RadiusStatus] = Field(None, alias='RadiusStatus')
    RegionsInfo_1: Optional[RegionsInfo] = Field(None, alias='RegionsInfo')
    ShareMethod_1: Optional[ShareMethod] = Field(None, alias='ShareMethod')
    ShareNotes: Optional[Notes] = None
    ShareStatus_1: Optional[ShareStatus] = Field(None, alias='ShareStatus')
    ShortName: Optional[DirectoryShortName] = None
    Size: Optional[DirectorySize] = None
    SsoEnabled_1: Optional[SsoEnabled] = Field(None, alias='SsoEnabled')
    Stage: Optional[DirectoryStage] = None
    StageLastUpdatedDateTime: Optional[LastUpdatedDateTime] = None
    StageReason_1: Optional[StageReason] = Field(None, alias='StageReason')
    Type: Optional[DirectoryType] = None
    VpcSettings: Optional[DirectoryVpcSettingsDescription] = None


class DirectoryDescriptions(RootModel[List[DirectoryDescription]]):
    root: List[DirectoryDescription] = Field(
        ..., description='A list of directory descriptions.'
    )


class UpdateActivities(RootModel[List[UpdateInfoEntry]]):
    root: List[UpdateInfoEntry]


class DescribeDirectoriesResult(BaseModel):
    DirectoryDescriptions_1: Optional[DirectoryDescriptions] = Field(
        None, alias='DirectoryDescriptions'
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeUpdateDirectoryResult(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    UpdateActivities_1: Optional[UpdateActivities] = Field(
        None, alias='UpdateActivities'
    )
